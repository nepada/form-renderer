{import helpers/override-split.latte}

{block #form}
    <form n:name="$form" n:class="$form->getElementPrototype()->class">
        {include #form-errors}
        {include #form-body}
    </form>
{/block}

{define #form-errors}
    <div n:foreach="$form->getOwnErrors() as $error" class="alert alert-danger">
        {$error}
    </div>
{/define}

{define #form-body}
    {foreach $form->getGroups() as $group}
        {include #group, group => $group, groupsIterator => $iterator}
    {/foreach}
    {include #controls, group => $form}
{/define}

{define #group}
    {if $group->getOption('visual') && $group->getControls()}
        <fieldset n:attr="id => $group->getOption('id')">
            {include #group-caption, group => $group}
            {include #controls, group => $group}
            {if $group->getOption('embedNext') && !$groupsIterator->isLast()}
                {php $groupsIterator->next()}
                {include #group, group => $groupsIterator->current(), groupsIterator => $groupsIterator}
            {/if}
        </fieldset>
    {/if}
{/define}

{define #group-caption}
    <legend n:if="$group->getOption('label') !== null">{$group->getOption('label')|safeTranslate}</legend>
    <p n:if="$group->getOption('description') !== null">{$group->getOption('description')|safeTranslate}</p>
{/define}

{define #controls}
    <div n:tag-if="$mode === inline" n:class="$verticalSpacingClasses, row, row-cols-sm-auto, g-2, align-items-baseline">
        {foreach $group->getControls() as $control}
            {continueIf $control->getOption('rendered') || $control->getOption('type') === 'hidden'}
            {include #helpers-override-split, blockNamePrefix => pair, control => $control, parameters => [controlsIterator => $iterator]}
        {/foreach}
    </div>
{/define}

{define #pair-type-default}
    <div n:tag-if="$mode === inline" class="col-12">
    <div n:attr="id => $control->getOption('id')" n:class="
        $control->getOption('class'),
        $mode !== inline ? $verticalSpacingClasses,
        $mode === horizontal ? row,
        $mode === inline ? 'row row-cols-sm-auto g-2 align-items-baseline',
        $control->isRequired() ? required
    ">
        {var $renderFloatingLabel = $useFloatingLabels && $control->getOption('floatingLabel')}
        {if !$renderFloatingLabel}{include #label, control => $control}{/if}
        <div n:tag-if="$mode === horizontal" n:class="$gridControlClass, !$control->getLabel() ? $gridOffsetClass">
            {include #helpers-override-split, blockNamePrefix => control, control => $control}
        </div>
    </div>
    </div>
{/define}

{define #pair-type-button}
    <div n:tag-if="$mode !== inline" n:class="$verticalSpacingClasses, $mode === horizontal ? row">
        <div n:tag-if="$mode === horizontal" n:class="$gridControlClass, $gridOffsetClass" n:inner-block="#control-type-button">
            {if !$control->getOption('rendered')}
                <div n:tag-if="$mode === inline" class="col-auto">
                    {input $control}
                </div>
                {include #control-help, control => $control}
            {/if}
            {if !$controlsIterator->isLast() && $controlsIterator->getNextValue()->getOption('type') === 'button'}
                {php $controlsIterator->next()}
                {include #control-type-button, control => $controlsIterator->current(), controlsIterator => $controlsIterator}
            {/if}
        </div>
    </div>
{/define}

{define #label}
    {var $renderFloatingLabel = $useFloatingLabels && $control->getOption('floatingLabel')}
    <label n:if="$control->getLabel()" n:name="$control" n:class="
        $control->getLabelPrototype()->class,
        $mode === basic ? form-label,
        $gridLabelClass,
        $mode === horizontal && in_array($control->getOption('type'), [radio, checkboxlist, range]) ? pt-sm-0,
        $mode === inline && !$renderFloatingLabel ? col-12
    " />
{/define}

{define #control-type-default}
    <div n:tag-if="$useErrorTooltips || in_array($mode, [inline])" n:class="$useErrorTooltips ? position-relative, $mode === inline ? col-12">
        {include #helpers-override-split, blockNamePrefix => input, control => $control}
        {if $useErrorTooltips}{include #control-errors, control => $control}{/if}
    </div>
    {include #control-help, control => $control}
    {if !$useErrorTooltips}{include #control-errors, control => $control}{/if}
{/define}

{define #control-type-checkboxlist}
    <div n:tag-if="$useErrorTooltips || in_array($mode, [inline, basic])" n:class="$useErrorTooltips ? position-relative, $mode === inline ? col-12">{* render in basic mode to get line break between label and inputs *}
        {include #helpers-override-split, blockNamePrefix => input, control => $control}
        {if $useErrorTooltips}{include #control-errors, control => $control}{/if}
    </div>
    {include #control-help, control => $control}
    {if !$useErrorTooltips}{include #control-errors, control => $control}{/if}
{/define}

{define #control-type-radio}
    {include #control-type-checkboxlist, control => $control}
{/define}

{define #control-type-togglebuttonlist}
    {include #control-type-checkboxlist, control => $control}
{/define}

{define #control-errors}
    {if $useErrorTooltips}
        <div n:if="count($control->getErrors()) > 0" class="d-block invalid-tooltip" n:inner-foreach="$control->getErrors() as $error">{$error}{sep} {/sep}</div>
    {else}
        <div n:foreach="$control->getErrors() as $error" class="d-block invalid-feedback">{$error}</div>
    {/if}
{/define}

{define #control-help}
    <div n:if="$control->getOption('description') !== null" n:class="
        form-text,
        $mode === inline ? col-auto,
    ">{$control->getOption('description')|safeTranslate}</div>
{/define}

{define #input-type-default}
    {input $control}
{/define}

{define #input-type-text}
    {var $renderFloatingLabel = $useFloatingLabels && $control->getOption('floatingLabel')}
    <div n:tag-if="$renderFloatingLabel" class="form-floating">
    <input n:name="$control" n:attr="placeholder: $renderFloatingLabel ? ($control->getControl()->placeholder ?? '')" n:class="
        $control->getControlPrototype()->class,
        form-control,
        ($control|validationClass)
    ">
    {if $renderFloatingLabel}{include #label, control => $control}{/if}
    </div>
{/define}

{define #input-type-datetime}
    {include #input-type-text, control => $control}
{/define}

{define #input-type-textarea}
    {var $renderFloatingLabel = $useFloatingLabels && $control->getOption('floatingLabel')}
    <div n:tag-if="$renderFloatingLabel" class="form-floating">
    <textarea n:name="$control" n:attr="placeholder: $renderFloatingLabel ? ($control->getControl()->placeholder ?? '')" n:class="
        $control->getControlPrototype()->class,
        form-control,
        ($control|validationClass)
    " />
    {if $renderFloatingLabel}{include #label, control => $control}{/if}
    </div>
{/define}

{define #input-type-select}
    {var $renderFloatingLabel = $useFloatingLabels && $control->getOption('floatingLabel')}
    <div n:tag-if="$renderFloatingLabel" class="form-floating">
    <select n:name="$control" n:attr="placeholder: $renderFloatingLabel ? ($control->getControl()->placeholder ?? '')" n:class="
        $control->getControlPrototype()->class,
        form-select,
        ($control|validationClass)
    " />
    {if $renderFloatingLabel}{include #label, control => $control}{/if}
    </div>
{/define}

{define #input-type-range}
    <input n:name="$control" n:class="
        $control->getControlPrototype()->class,
        form-range,
        align-top,
        ($control|validationClass)
    ">
{/define}

{define #input-type-file}
    <input n:name="$control" n:class="
        $control->getControlPrototype()->class,
        form-control,
        ($control|validationClass)
    ">
{/define}

{define #input-type-color}
    <input n:name="$control" n:class="
        $control->getControlPrototype()->class,
        form-control,
        form-control-color,
        ($control|validationClass)
    ">
{/define}

{define #input-type-checkbox}
    <div n:class="
        $control->getSeparatorPrototype()->class,
        form-check
    ">
        <input n:name="$control:" n:class="
            $control->getControlPrototype()->class,
            form-check-input,
            ($control|validationClass)
        ">
        <label n:name="$control:" n:class="
            $control->getLabelPrototype()->class,
            form-check-label
        " />
    </div>
{/define}

{define #input-type-switch}
    <div n:class="
        $control->getSeparatorPrototype()->class,
        form-check,
        form-switch
    ">
        <input n:name="$control:" n:class="
            $control->getControlPrototype()->class,
            form-check-input,
            ($control|validationClass)
        ">
        <label n:name="$control:" n:class="
            $control->getLabelPrototype()->class,
            form-check-label
        " />
    </div>
{/define}

{define #input-type-togglebutton}
    <input n:name="$control:" n:class="
        $control->getControlPrototype()->class,
        btn-check,
        ($control|validationClass)
    ">
    <label n:name="$control:" />
{/define}

{define #input-type-checkboxlist}
    <div n:foreach="$control->items as $k => $v" n:class="
        $control->getSeparatorPrototype()->class,
        form-check,
        $mode === inline || !$control->separatorPrototype->getName() ? form-check-inline,
        $mode === inline ? ($iterator->isLast() ? me-0 : me-1)
    ">
        <input n:name="$control:$k" n:class="
            $control->getControlPrototype()->class,
            form-check-input,
            ($control|validationClass)
        ">
        <label n:name="$control:$k" n:class="
            $control->getItemLabelPrototype()->class,
            form-check-label
        ">{=$control->translate($v)}</label>
    </div>
{/define}

{define #input-type-radio}
    {include #input-type-checkboxlist, control => $control}
{/define}

{define #input-type-togglebuttonlist}
    {foreach $control->items as $k => $v}
    <input n:name="$control:$k" n:class="
        $control->getControlPrototype()->class,
        btn-check,
        ($control|validationClass)
    ">
    <label n:name="$control:$k">{=$control->translate($v)}</label>
    {/foreach}
{/define}
